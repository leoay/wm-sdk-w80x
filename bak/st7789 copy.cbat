
#include <string.h>
#include "st7789.h"

static uint8_t st7789_buf[ST7789_BUF_SIZE];
static uint16_t st7789_buf_pt = 0;

typedef enum
{
    GPIO_PIN_RESET = 0,
    GPIO_PIN_SET
} GPIO_PinState;

static  void HAL_GPIO_WritePin(u16 gpiox_num, GPIO_PinState pin_state) {
    // tls_gpio_cfg(gpiox_num, WM_GPIO_DIR_OUTPUT, WM_GPIO_ATTR_PULLHIGH);
    tls_gpio_write(gpiox_num, pin_state);
}

#define ST7789_RES     WM_IO_PB_01
#define ST7789_DC      WM_IO_PB_00

#define ST7789_DC_CMD           HAL_GPIO_WritePin(ST7789_DC, GPIO_PIN_RESET)
#define ST7789_DC_DATA          HAL_GPIO_WritePin(ST7789_DC, GPIO_PIN_SET)
#define ST7789_RESET_LOW        HAL_GPIO_WritePin(ST7789_RES, GPIO_PIN_RESET)
#define ST7789_RESET_HIGH       HAL_GPIO_WritePin(ST7789_RES, GPIO_PIN_SET)

#define HSPI_BUF_SIZE   1024
#define USER_DEBUG		1
#if USER_DEBUG
#define USER_PRINT printf
#else
#define USER_PRINT(fmt, ...)
#endif

#define usleep(a)		tls_os_time_delay(a/10000)

static u16 BACK_COLOR;
static u32 count = 0;
static bool isdata = 0;

static void ILI9341_GPIO_Init(void)
{
	tls_gpio_cfg(GPIO_RES, WM_GPIO_DIR_OUTPUT, WM_GPIO_ATTR_FLOATING);
	tls_gpio_write(GPIO_RES,0);
	
	tls_gpio_cfg(GPIO_DC, WM_GPIO_DIR_OUTPUT, WM_GPIO_ATTR_FLOATING);
	tls_gpio_write(GPIO_DC,0);
	
	isdata=0;
}


static void GPIO_ON(unsigned int gpio_pin)
{
	tls_gpio_write(gpio_pin,1);
}

static void GPIO_OFF(unsigned int gpio_pin)
{
	tls_gpio_write(gpio_pin,0);
}

static void GPIO_CMD(void)
{
	if(isdata)
	{
		tls_gpio_write(GPIO_DC,0);
		isdata=0;
	}
}

static void GPIO_DATA(void)
{
	if(!isdata)
	{
		tls_gpio_write(GPIO_DC,1);
		isdata=1;
	}
}


static void ST7789_GPIO_CMD(void)
{
	if(isdata)
	{
		ST7789_DC_CMD;
		isdata=0;
	}
}

static void ST7789_GPIO_DATA(void)
{
	if(!isdata)
	{
		ST7789_DC_DATA;
		isdata=1;
	}
}

static int ILI9341_SPI_init(void)
{

	int clk=160000000;
	int type=2;

	wm_spi_cs_config(LCD_SPI_CS);
	wm_spi_ck_config(LCD_SPI_CLK);
	wm_spi_di_config(LCD_SPI_MISO);
	wm_spi_do_config(LCD_SPI_MOSI);

	//printf("\r\n");
	//printf("cs--PB04, ck--PB02, di--PB03, do--PB05;\r\n");
	
    if (0 == type)
    {
        tls_spi_trans_type(0);
    }
    else
    {
        tls_spi_trans_type(2);
    }

    tls_spi_setup(TLS_SPI_MODE_0, TLS_SPI_CS_LOW, clk);
	printf("slave_spi_demo\n");
    return WM_SUCCESS;
}

/******************************************************************************
      函数说明：延时函数
      入口数据：ms 延时时间
      返回值：  无
******************************************************************************/
void HAL_Delay_MS(unsigned int ms)
{                         
	//tls_os_time_delay(ms /HZ);
	usleep(ms*1000); 
}

/******************************************************************************
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
// void ILI9341_WR_DATA8(unsigned char dat)
// {
// 	GPIO_DATA();//写数据
// 	tls_spi_write(&dat,1);
// }

/******************************************************************************
      函数说明：LCD写入数据
      入口数据：dat 写入的数据
      返回值：  无
******************************************************************************/
void ILI9341_WR_DATA(u16 dat)
{
	uint8_t data[2];
	data[0] = dat>>8;
	data[1] = dat;
	GPIO_DATA();//写数据
	//printf("-------------%x", data);
	tls_spi_write((uint8_t *)data,2);
}

/******************************************************************************
      函数说明：LCD写入命令
      入口数据：dat 写入的命令
      返回值：  无
******************************************************************************/
void ILI9341_WR_REG(unsigned char dat)
{
	GPIO_CMD();//写命令
	tls_spi_write(&dat,1);
}

/******************************************************************************
      函数说明：设置起始和结束地址
      入口数据：x1,x2 设置列的起始和结束地址
                y1,y2 设置行的起始和结束地址
      返回值：  无
******************************************************************************/
void ILI9341_Address_Set(u16 x1,u16 y1,u16 x2,u16 y2)
{
	ILI9341_WR_REG(0x2a);//列地址设置
	ILI9341_WR_DATA(x1);
	ILI9341_WR_DATA(x2);
	ILI9341_WR_REG(0x2b);//行地址设置
	ILI9341_WR_DATA(y1);
	ILI9341_WR_DATA(y2);
	ILI9341_WR_REG(0x2c);//储存器写
}

//写一个字

//发送一个字节
static void ST7789_TransmitByte(uint8_t dat)
{
    tls_spi_write(&dat, 1);
}

static void ST7789_Transmit(const uint8_t *pData, uint32_t Size)
{
    //逆序发送

	tls_spi_write(pData, Size);
}

static void ST7789_WriteCommand(uint8_t dat)
{
    ST7789_GPIO_CMD();
    ST7789_TransmitByte(dat);
}

static void ST7789_WriteDataByte(const uint8_t* buff)
{
    ST7789_GPIO_DATA();
    ST7789_TransmitByte(buff);
}

static void ST7789_WriteData(const uint8_t* buff, size_t buff_size)
{
    ST7789_GPIO_DATA();
    ST7789_Transmit(buff, buff_size);
}

/////////////////////////

static void ST7789_SetAddrWindow(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
	ST7789_WriteCommand(0x2A);
	ST7789_WriteDataByte(x1 >> 8);
	ST7789_WriteDataByte(x1);
	ST7789_WriteDataByte(x2 >> 8);
	ST7789_WriteDataByte(x2);

	ST7789_WriteCommand(0x2b);
	ST7789_WriteDataByte(y1 >> 8);
	ST7789_WriteDataByte(y1);
	ST7789_WriteDataByte(y2 >> 8);
	ST7789_WriteDataByte(y2);

	ST7789_WriteCommand(0x2C);
}

void ILI9341_Clear(u16 Color)
{
	u16 i,j;  	
	ILI9341_Address_Set(0,0,ILI9341_W-1,ILI9341_H-1);
    for(i=0;i<ILI9341_W;i++)
	 {
	  for (j=0;j<ILI9341_H;j++)
	   	{
        	ILI9341_WR_DATA(Color);	 			 
	    }
	  }
}


static void ST7789_WriteBuff(uint8_t* buff, size_t buff_size)
{
    while (buff_size--)
    {
        st7789_buf[st7789_buf_pt++] = *buff++;
        if (st7789_buf_pt == ST7789_BUF_SIZE)
        {
            ST7789_Transmit(st7789_buf, st7789_buf_pt);
            st7789_buf_pt = 0;
        }
    }
}

static void ST7789_FlushBuff(void)
{
    if (st7789_buf_pt > 0)
    {
        ST7789_Transmit(st7789_buf, st7789_buf_pt);
        st7789_buf_pt = 0;
    }
}

//填充一块区域
void ST7789_Fill(uint16_t x_start, uint16_t y_start, uint16_t x_end, uint16_t y_end, uint16_t color)
{
	u16 i = 0;
    u32 size = 0, size_remain = 0;

    size = (x_end - x_start + 1) * (y_end - y_start + 1) * 2;

    if(size > ST7789_BUF_SIZE)
    {
        size_remain = size - ST7789_BUF_SIZE;
        size = ST7789_BUF_SIZE;
    }

    ST7789_SetAddrWindow(x_start, y_start, x_end, y_end);

    while(1)
    {
        for(i = 0; i < size / 2; i++)
        {
            st7789_buf[2 * i] = color >> 8;
            st7789_buf[2 * i + 1] = color;
        }
        ST7789_GPIO_DATA();
        ST7789_WriteBuff(&st7789_buf, size);

        if(size_remain == 0)
            break;

        if(size_remain > ST7789_BUF_SIZE)
        {
            size_remain = size_remain - ST7789_BUF_SIZE;
        }
        else
        {
            size = size_remain;
            size_remain = 0;
        }
    }
}

//填充一块区域
// void ILI9341_Fill(u16 xsta,u16 ysta,u16 xend,u16 yend,u16 color)
// {          
// 	u16 i,j; 
// 	ST7789_SetAddrWindow(xsta,ysta,xend,yend);      //设置光标位置 
// 	for(i=ysta;i<=yend;i++)
// 	{													   	 	
// 		for(j=xsta;j<=xend;j++)
// 			ILI9341_WR_DATA(color);//设置光标位置 	    
// 	} 					  	    
// }


//画图片
void ST7789_Show_Image(u16 x, u16 y, u16 width, u16 height, const u8 *p)
{
    if(x + width > ST7789_W || y + height > ST7789_H)
    {
        return;
    }

    ST7789_SetAddrWindow(x, y, x + width - 1, y + height - 1);
   	ST7789_GPIO_DATA();
    ST7789_WriteBuff((u8 *)p, width * height * 2);
}

//////////////////////////////////////////////////////////////////////////////




/******************************************************************************
      函数说明：LCD初始化函数
      入口数据：无
      返回值：  无
******************************************************************************/
void ILI9341_LCD_Init(void)
{
	
	GPIO_OFF(GPIO_RES);
	HAL_Delay_MS(20);
	GPIO_ON(GPIO_RES);
	HAL_Delay_MS(20);

	ST7789_WriteCommand(0xE0); //Set Gamma
	ST7789_WriteDataByte(0x0F);
	ST7789_WriteDataByte(0x22);
	ST7789_WriteDataByte(0x1C);
	ST7789_WriteDataByte(0x1B);
	ST7789_WriteDataByte(0x08);
	ST7789_WriteDataByte(0x0F);
	ST7789_WriteDataByte(0x48);
	ST7789_WriteDataByte(0xB8);
	ST7789_WriteDataByte(0x34);
	ST7789_WriteDataByte(0x05);
	ST7789_WriteDataByte(0x0C);
	ST7789_WriteDataByte(0x09);
	ST7789_WriteDataByte(0x0F);
	ST7789_WriteDataByte(0x07);
	ST7789_WriteDataByte(0x00);

	ST7789_WriteCommand(0XE1); //Set Gamma
	ST7789_WriteDataByte(0x00);
	ST7789_WriteDataByte(0x23);
	ST7789_WriteDataByte(0x24);
	ST7789_WriteDataByte(0x07);
	ST7789_WriteDataByte(0x10);
	ST7789_WriteDataByte(0x07);
	ST7789_WriteDataByte(0x38);
	ST7789_WriteDataByte(0x47);
	ST7789_WriteDataByte(0x4B);
	ST7789_WriteDataByte(0x0A);
	ST7789_WriteDataByte(0x13);
	ST7789_WriteDataByte(0x06);
	ST7789_WriteDataByte(0x30);
	ST7789_WriteDataByte(0x38);
	ST7789_WriteDataByte(0x0F);

	ST7789_WriteCommand(0x11);
    /* wait for power stability */

    HAL_Delay_MS(120);

    /* Memory Data Access Control */
    ST7789_WriteCommand(0x36);
    ST7789_WriteDataByte(0x00);

    /* RGB 5-6-5-bit  */
    ST7789_WriteCommand(0x3A);
    ST7789_WriteDataByte(0x65);

    /* Porch Setting */
    ST7789_WriteCommand(0xB2);
    ST7789_WriteDataByte(0x0C);
    ST7789_WriteDataByte(0x0C);
    ST7789_WriteDataByte(0x00);
    ST7789_WriteDataByte(0x33);
    ST7789_WriteDataByte(0x33);

    /*  Gate Control */
    ST7789_WriteCommand(0xB7);
    ST7789_WriteDataByte(0x72);

    /* VCOM Setting */
    ST7789_WriteCommand(0xBB);
    ST7789_WriteDataByte(0x3D);   //Vcom=1.625V

    /* LCM Control */
    ST7789_WriteCommand(0xC0);
    ST7789_WriteDataByte(0x2C);

    /* VDV and VRH Command Enable */
    ST7789_WriteCommand(0xC2);
    ST7789_WriteDataByte(0x01);

    /* VRH Set */
    ST7789_WriteCommand(0xC3);
    ST7789_WriteDataByte(0x19);

    /* VDV Set */
    ST7789_WriteCommand(0xC4);
    ST7789_WriteDataByte(0x20);

    /* Frame Rate Control in Normal Mode */
    ST7789_WriteCommand(0xC6);
    ST7789_WriteDataByte(0x0F);	//60MHZ

    /* Power Control 1 */
    ST7789_WriteCommand(0xD0);
    ST7789_WriteDataByte(0xA4);
    ST7789_WriteDataByte(0xA1);

    /* Display Inversion On */
    ST7789_WriteCommand(0x21);

    ST7789_WriteCommand(0x29);

	//ILI9341_Address_Set(0,0,239,239);
	ST7789_SetAddrWindow(0, 0, 239, 239);
	ST7789_GPIO_DATA();
	isdata=1;
} 

// /******************************************************************************
//       函数说明：LCD显示汉字
//       入口数据：x,y   起始坐标
//       返回值：  无
// ******************************************************************************/
// void ILI9341_DrawPoint(u16 x,u16 y,u16 color)
// {
// 	ILI9341_Address_Set(x,y,x,y);//设置光标位置 
// 	ILI9341_WR_DATA(color);
// } 


// #if 0
// void ILI9341_DrawLine(u16 y,u16* data)
// {
// 	ILI9341_Address_Set(0,y,240,y);//设置光标位置 
// 	GPIO_DATA();//写数据
// 	tls_spi_write((uint8_t *)data,480);
// }
// #else
// void ILI9341_DrawLine(u16 y,u16* data)
// {
// 	tls_spi_write((uint8_t *)data,512);
// }
//#endif

void ST7789_Init(void)
{
	ILI9341_GPIO_Init();
	ILI9341_SPI_init();
	ILI9341_LCD_Init();

	// ILI9341_WR_REG(0x36);	   //set the model of scanning
	// ILI9341_WR_DATA8((1<<5)|(0<<6)|(1<<7)|(1<<3)); //左横屏
	
	// //ILI9341_WR_DATA8((1<<5)|(1<<6));右横屏幕
	// //ILI9341_WR_DATA8(0x08); 竖屏幕
	// ILI9341_WR_REG(0x2B); 	//set the page address 横屏幕设置 Y轴到239
	// ILI9341_WR_DATA8(0x00);
	// ILI9341_WR_DATA8(0x00);
	// ILI9341_WR_DATA8(0x00);
	// ILI9341_WR_DATA8(0xDF);

	// ILI9341_WR_REG(0x2A);    //set the column address X轴到319 改为255
	// ILI9341_WR_DATA8(0x00);
	// ILI9341_WR_DATA8(0x00);
	// //ILI9341_WR_DATA8(0x01);
	// //ILI9341_WR_DATA8(0x3F);
	// ILI9341_WR_DATA8(0x00);
	// ILI9341_WR_DATA8(0xFF);
	
	// ILI9341_WR_REG(0x2c);//储存器写
}